---
- hosts: east1
  become: yes
  vars_files:
  - secrets.yml
  vars:
    vhosts_dir: "/etc/nginx/sites-available"
    nginx_user: www-data
    # cert_private_key: 123abc
    # cert_email: elliott.chenoweth@gmail.com
    app_host: localhost
    app_port: 7733
    app_domain:
      root: metacomic.xyz
      primary: www.metacomic.xyz
      static: s.metacomic.xyz
      api: api.metacomic.xyz
    app_root: "/app"
    app_webroot: "{{app_root}}/public_html"
    app_user: "{{nginx_user}}"
    app_db: comics
    app_db_host: localhost
    app_db_user: comics
    app_db_pw: "{{ postgres_password }}"
    app_env: production # should be defined at inventory level?
    app_package_name: comics
    app_bjoern_module_path: comics.webapp.api
    # app_sock_path: "/var/{{ app_package_name }}/app.sock"
    app_sock_path: "{{app_root}}/bjoern.sock"
    app_sock_path_api: "{{app_root}}/bjoern2.sock"
    #postgres_password: defined in secrets.yml
    postgresql_users:
    - name: comics
      password: "{{ postgres_password }}"
    #postgresql_data_dir: /var/db/postgres/data
    postgresql_databases:
    - name: comics
  roles:
  - { role: geerlingguy.postgresql, become: yes }
  tasks:
    - name: install packages
      package:
        update_cache: yes
        pkg:
        - nginx
        - python-setuptools
        - python3
        - python3-setuptools
        - python3-pip
        - python3-virtualenv
        - virtualenv
        - libev-dev # bjoern dependency

    - name: make user to run primary website python app
      user:
        name: "{{ app_user }}"
        system: yes

    - name: create app dir
      file:
        path: "{{ app_root }}"
        state: directory
        mode: '0755'
        owner: "{{ app_user }}"
        group: "{{ app_user }}"

    - name: create static dir
      file:
        path: "{{ app_root }}/static"
        state: directory
        mode: '0755'
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes

    - name: create webroot dir
      file:
        path: "{{ app_webroot }}"
        state: directory
        mode: '0755'
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes

    # - name: edit nginx config
    #   lineinfile:
    #     path: /etc/nginx/nginx.conf
    #     regexp: '^worker_processes'
    #     line: "worker_processes {{ ansible_processor_vcpus|default(ansible_processor_count) }};"

    - name: delete nginx default vhost
      file:
        path: "{{vhosts_dir}}/default"
        state: absent

    - name: delete nginx default vhost symlink
      file:
        path: "/etc/nginx/sites-enabled/default"
        state: absent

    - name: copy nginx default (catch-all) configuration
      copy: >
          src="{{inventory_dir}}/files/nginx/vhost-default.conf"
          dest="{{vhosts_dir}}/000-default.conf"
      notify:
      - reload nginx


    # - name: check if cert exists
    #   stat: path=/etc/nginx/ssl/{{app_domain.root}}.crt
    #   register: cert_path
    #
    # - name: install self-signed cert
    #   include: "{{inventory_dir}}/tasks/cert_selfsigned.yml"
    #   when: app_env == 'development' and cert_path.stat.exists == False

    - name: install letsencrypt cert
      include: "{{inventory_dir}}/tasks/cert_letsencrypt.yml"
      when: app_env == 'production' #and cert_path.stat.exists == False



    - name: enable and start nginx
      service:
        name: nginx
        enabled: yes
        state: started

    # geerlingguy.postgres doesn't allow you to set db owner
    # - name: change app postgresql db owner
    #   postgresql_owner:
    #     db: "{{ app_db }}"
    #     new_owner: "{{ app_db_user }}"
    #   become_user: postgres
    #   become: yes
    #
    - name: copy python app
      synchronize:
        src: "{{inventory_dir}}/{{app_package_name}}"
        dest: "{{app_root}}"

    # (locally) pip freeze > comics/requirements.txt

    - name: install app's python dependencies
      pip:
        requirements: "{{app_root}}/{{ app_package_name }}/requirements.txt"
        virtualenv: "{{app_root}}/venv"
        # virtualenv_command: "python3 -m venv"
        virtualenv_python: "python3"

    - name: install Bjoern
      pip:
        name: bjoern
        virtualenv: "{{app_root}}/venv"
        # virtualenv_command: "python3 -m venv"
        virtualenv_python: "python3"

    - name: copy app config (production)
      template: >
        src={{inventory_dir}}/templates/app/config_prod.py.j2
        dest={{app_root}}/config.py
      when: app_env == 'production'

    - name: copy app config (development)
      template: >
        src={{inventory_dir}}/templates/app/config.py.j2
        dest={{app_root}}/config.py
      when: app_env == 'development'

    # - name: set app config file permissions

    - name: copy run.py
      template: >
        src={{inventory_dir}}/templates/bjoern/run.py.j2
        dest={{app_root}}/run.py
      notify:
      - reload bjoern # this doesn't work: Failed to reload bjoern.service: Job type reload is not applicable for unit bjoern.service.

    - name: make socket dir
      file:
        path: /var/{{app_package_name}}
        state: directory
        group: "{{app_user}}"
        owner: "{{app_user}}"
        mode: '0774'

    - name: copy app's systemd unit file
      template: >
        src={{inventory_dir}}/templates/systemd/service.j2
        dest=/etc/systemd/system/bjoern.service
      notify:
      - reload systemd

    - name: enable app's systemd unit
      systemd:
        name: bjoern
        state: started
        enabled: yes
        # daemon_reload: yes

  # only do this after python app is running or forwarding wont work
    - name: copy real vhost config with ssl
      template: >
          src={{inventory_dir}}/templates/nginx/metacomic-vhost.conf.j2
          dest={{vhosts_dir}}/{{ app_domain.root }}.conf
      notify:
      - reload nginx

  handlers:
  - name: reload nginx
    service: name=nginx state=reloaded

  - name: reload systemd
    systemd:
      daemon_reload: yes

  - name: reload bjoern
    systemd:
      name: bjoern
      state: restarted
